show databases; // показать все базы

create database shopdb; //создать базу с именем shopdb

use shopdb; //сменить базу(использовать базу)

create table comp (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT, 
	cost float default 0.0,
	name varchar(50) default "PRODUCT",
	count int default 0,
	case_id int default 0,
	PRIMARY KEY (id)
);
//create table - создать таблицу
//comp - имя таблицы
//id - имя столбца
// INT - тип данных
//UNSIGNED - беззнакокое(не может быть отрицат)
// NOT NULL - не может быть неопределено
// AUTO_INCREMENT - если неопределено, то установить какое-то(берет последнее наибольшее значение и увелич на 1)
//default 0.0 - дефолтное значение
//varchar(50) - набор символов(строка)(максимум 50 символов)
//PRIMARY KEY - уникальный идентификатор

show tables; //показывает все таблицы в базе(в базе, в которой сейчас работаем)

select * from comp; //показать все из таблицы comp

insert into comp values(NULL, 100, "Первый", 1, 0); // вставить(создать) экземпляр одной сущности(создать строку)
//в скобках указываем значения(id, цена, имя, кол-во, case_id)



ALTER TABLE comp    //изменить таблицу comp
    ADD CONSTRAINT comp_cpu  //добавить связь с таблицей cpu(просто название связи)
    FOREIGN KEY(cpu_id) 	//поле которое ссылается
    REFERENCES cpu(id)	//таблица(cpu) и поле(id) на которое ссылаемся
	
	запрос к таблице comp - выдать запись где id=1 and id_cpu=2
select * from comp
	where id=1 and id_cpu=2
запрос кешируется......
или ООП подход 
select: comp
	where:
	id_cpu=2
	id=1
	
	в консоле
mysql -u root -p -h localhost shopdb; - подлк к базе из консоли windows(mysql - то что нужно запустить,-u это значит user, 
-p это значит что хотим ввести пароль для пользователя, -h после этого параметра указывается host(адрес сервера куда подключаемся))

далее в строке: create database eshopdb;  - создать базу(eshopdb) в базе(shopdb)

drop database eshopdb;  - удаление базы данных

создаем базу с указанием кодировки
CREATE DATABASE my_db CHARACTER SET utf8 COLLATE utf8_general_ci;

создать пользователя и наделить его правами
CREATE USER 'ivan'@'localhost' IDENTIFIED BY '123';  где ivan -логин пользователя, IDENTIFIED BY '123' - значит идентифицировать пользователя паролем 123
localhost - здесь адрес с которого он может подключаться(здесь разрешаем только локальное подключение,если '%' то ото всюду).

GRANT ALL PRIVILEGES ON  my_db.* TO 'ivan'@'localhost';
ALL PRIVILEGES - полные права
my_db.* - то есть права на все таблицы в базе my_db
TO 'ivan'@'localhost' - указываем какому пользователю даем права и откуда он подключается


для mysql 8
создать
CREATE USER 'ivan'@'localhost' IDENTIFIED WITH mysql_native_password BY '123';
дать права
GRANT ALL PRIVILEGES ON  my_db.* TO 'ivan'@'localhost' with grant option;

Вход под новым пользователем:
mysql -u ivan -p  my_db

заполнить базу
1) импорт из вне(из другой консоли не входя в консоль mysql)
shell>   mysql -u ivan -p db_name < input_file

2)импорт из локального хранилища
mysql> source C:\scripts\my_commands.sql; 
mysql> source ..\scripts\my_commands.sql;


Простой запрос
SELECT col1,col2,col3 FROM table_name1,table_name2 WHERE expression

Пример запроса без исходной таблицы
SELECT 2+2, REPEAT('x',5), DATE_ADD('2001-01-01',INTERVAL 7 DAY), 1/0;
	2+2 - рперация
	REPEAT('x',5) - ф-ция

	алеасы -  или as  или ``
SELECT 2+2 as name, REPEAT('x',5), DATE_ADD('2001-01-01',INTERVAL 7 DAY) `date`, 1/0;
то есть в результате выведется не DATE_ADD('2001-01-01',INTERVAL 7 DAY) , а псевдоним data
вместо 2+2 будет name

CREATE TABLE user 
(
   user_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
   login varchar(24) NOT NULL,
   user_name varchar(24) NOT NULL,
   pass_hex varchar(32) NOT NULL,
   PRIMARY KEY (user_id) 
);

CREATE TABLE tokens 
(
   id INT UNSIGNED NOT NULL AUTO_INCREMENT,
   user_id INT UNSIGNED NOT NULL,
   token varchar(32) NOT NULL,
   PRIMARY KEY (id) 
);

						Лекция3

mysql -u ivan -p -h 192.168.1.35  - подключиться из сторонней консоли к удаленной базе
DROP table comp, cpu;
mysql -u root eshopdb < eshopdb.sql
CREATE DATABASE my_db CHARACTER SET utf8 COLLATE utf8_general_ci;
source eshopdb.sql; - если делать импорт дампа в свою(существующую базу) уже из базы

select * from comp; - запрос из базы чтобы посмотреть содержимое таблицы(comp)

смена кодировки
SET CHARACTER SET 'utf8';

добавление данных
INSERT INTO ......

после селект идут названия столбцов и их правила отображения
select 2, '*', 2 , 2*2;
select 2 as operand1, '*' operator, 2  operand2, 2*2 result;

desc cpu;  - вывести структуру таблицы cpu

select * from cpu t1, cpu t2; - обращаемся к одний таблице cpu ОДНА

select name,frequency from cpu; - выбрать только поля имя и частоту из табл cpu
или тоже самое
select cpu.name, cpu.frequency FROM cpu;
или тоже самое через псевдоним(у нас С)
select C.name, C.frequency FROM cpu as C;

вывести в частоте отдельно тысячи и остаток
идем последовательно
select C.name, FLOOR(C.frequency/1000) FROM cpu as C;
select C.name, FLOOR(C.frequency/1000) as fr FROM cpu as C; - fr это псевдоним
select C.name, FLOOR(C.frequency/1000) as mil, C.frequency%1000 as freq FROM cpu as C;

//в CONCAT перечисляем значения(значения полей) которые хотим объединить (это будет отделльный столбец)
//as 'concat' - псевдоним для столбца конкатинации(в кавычках, так как ф=ция называется CONCAT, чтобы mysql не "ввелся в заблуждение")
select 
	C.name, 
	FLOOR(C.frequency/1000) as mil, 
	C.frequency%1000 as freq,
	CONCAT(C.name, 
			" ",
			FLOOR(C.frequency/1000),
			" ",
			C.frequency%1000
	) as 'concat'
FROM cpu as C;


select * FROM comp;

вевести все записи где установлен только первый процессор
select * From comp WHERE cpu_id = 1;

выбрать компы у которых цена больше 10тр
select * From comp WHERE cost>10000;

вевести все записи где установлен только первый процессор и у которых цена больше 10тр
select * From comp WHERE cpu_id = 1 AND cost>10000;		//можно использовать && вместо AND

выбрать сборки где имя='зор'
select * FROM comp WHERE name = "зор";

выбрать все сборки имя которых начинаются с 'зор'
select * FROM comp WHERE name like "зор%";

имя 'зор' ИЛИ цена > 27000
select * FROM comp WHERE name like "зор%" OR cost > 27000;

вывести таблицу, где будет название и суммарная стоимость по каждому из отфильтрованных (а фильтр: цена > 2700 И имя начинается с 'зор')
select 
	name,
	count*cost as total_cost
FROM comp
WHERE
	name like "зор%"
	AND cost>2700;
	

	Изменение таблиц (ALTER TABLE)
добавим столбец - указываем тип объекта(TABLE), имя таблицы, ADD COLUMN - команда добавить столбец, далее описание столбца
self_cost - будет себистоимость
ALTER TABLE comp ADD COLUMN self_cost INT UNSIGNED NOT NULL DEFAULT 0;

	изменить значение строки(строк) таблицы
UPDATE comp SET self_cost = ROUND(cost/2000)*1000 WHERE cost>10000;
то есть - обновить таблицу comp, SET - установить в поле self_cost значение, вычесленное по формуле, причем только в тех строках
где цена >10000


вывести таблицу, где будет название,цена, себистоимость и доход от продажи(цена - себистоимость) из отфильтрованных 
(а фильтр: цена > 2700 И имя начинается с 'зор')
select 
	name,
	cost,
	self_cost,
	cost - self_cost as revenue
FROM comp
WHERE
	name like "зор%"
	AND cost>2700;
	
	добавить доход от реализации всего кол-ва по отфильтрованной позиции
select 
	name,
	count,
	cost,
	self_cost,
	cost - self_cost as revenue,
	(cost - self_cost)*count as rev_all
FROM comp
WHERE
	name like "зор%"
	AND cost>2700;	
	
	вывести еще процент наценки от себистоимости ((cost - self_cost)/self_cost)*100
select 
	name,
	count,
	cost,
	self_cost,
	cost - self_cost as revenue,
	(cost - self_cost)*count as rev_all,
	CONCAT(
		((cost - self_cost)/self_cost)*100,
		" %") as '%'
FROM comp
WHERE
	name like "зор%"
	AND cost>2700;	
	
	вывести столбец - и по if определять - если cpu_id=1, то выводить intel, если cpu_id=2, то AMD
конструкция IF(<условие>,<если истина>,<если лож>)
убрать поле %, но 
+добавить условие(фильтр) в WHERE - выводить те, у которых процент прибыли > 60%
select 
	name,
	count,
	cost,
	self_cost,
	cost - self_cost as revenue,
	(cost - self_cost)*count as rev_all,
	IF(cpu_id=1,'Intel','AMD') as CPU_brend
FROM comp
WHERE
	name like "зор%"
	AND cost>2700
	AND ((cost - self_cost)/self_cost)*100 > 60;
	
	
							Лекция 4
	
присоединение таблиц - "левые присоединения"	
//В SELECT указываем столбци, которые надо вывести(из двух таблиц) .далее указываем левую таблицу(FROM comp), 
затем правило присоединения(LEFT JOIN) и правую таблицу (cpu), далее on comp.cpu_id = cpu.id
(присоединяем по этому условию), далее "фильтр" WHERE 

SELECT comp.name, comp.cpu_id,
		cpu.id, cpu.name
FROM comp		
LEFT JOIN cpu
	on comp.cpu_id = cpu.id
WHERE 
	comp.cost >= 29000;
	
	//это полное объединение.из этого объединения строится объединение выше
	(то есть сначала объединяется так, а затам срабатывает условие on comp.cpu_id = cpu.id)
	То есть каждая запись из первой таблици соединяется с каждой записью во второй(можно перебрать все варианты соединений)
SELECT comp.name, comp.cpu_id,
		cpu.id, cpu.name
FROM comp, cpu		
WHERE 
	comp.cost >= 29000;
	
	//то же что и первое объединение
SELECT comp.name, comp.cpu_id,
		cpu.id, cpu.name
FROM comp, cpu		
WHERE 
	comp.cost >= 29000 AND comp.cpu_id = cpu.id;

//LIMIT 10 - ограничение(выведет только первые 10 элементов запроса)
SELECT comp.name, comp.cpu_id,
		cpu.id, cpu.name
FROM comp		
LEFT JOIN cpu
	on comp.cpu_id = cpu.id
WHERE 
	comp.cost > 1000
LIMIT 10;

//можно указать в LIMIT второй параметр - это будет начало отсчета(от какого элемента начинать выводить)
//но этот параметр указывается первым
SELECT comp.name, comp.cpu_id,
		cpu.id, cpu.name
FROM comp		
LEFT JOIN cpu
	on comp.cpu_id = cpu.id
WHERE 
	comp.cost > 1000
LIMIT 2, 10;

//сортировка вывода - ORDER BY comp.cost ASC . (где ASC по возрастанию, DESC по убыванию)
SELECT comp.name, comp.cpu_id, comp.cost,
		cpu.id, cpu.name
FROM comp		
LEFT JOIN cpu
	on comp.cpu_id = cpu.id
WHERE 
	comp.cost > 1000
ORDER BY comp.cost ASC
LIMIT 2, 10;


//////
CREATE TABLE `case`
(
   id INT UNSIGNED NOT NULL AUTO_INCREMENT,
   weight INT UNSIGNED NOT NULL,
   cost INT UNSIGNED NOT NULL,
   powerBP INT UNSIGNED NOT NULL,
   PRIMARY KEY (id) 
);

//заполнение строки данными
Insert into `case`
	values (NULL,15,1500,600),(NULL,17,2500,800);
	
//апдейт таблицы comp - заполним значения case_id псевдо случайными значениями(исходя из того, что у нас всего два корпуса %2, если 5 корпусов, то %5)
UPDATE comp SET case_id = (id+cpu_id)%2+1;

					
					Лекция 5
					
//таблица винчестеров
CREATE TABLE disk
(
   id INT UNSIGNED NOT NULL AUTO_INCREMENT,
   value int UNSIGNED NOT NULL,
   weight INT UNSIGNED NOT NULL,
   cost INT UNSIGNED NOT NULL,
   PRIMARY KEY (id) 
);

//промежуточная таблица для связи дисков и сборок
CREATE TABLE CompDisk
(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	PRIMARY KEY (id) 
);
//добавить столбцы
ALTER TABLE Disk ADD COLUMN count INT UNSIGNED NOT NULL DEFAULT 0;

ALTER TABLE CompDisk ADD COLUMN comp_id INT UNSIGNED NOT NULL;
ALTER TABLE CompDisk ADD COLUMN disk_id INT UNSIGNED NOT NULL;
или так
ALTER TABLE CompDisk ADD COLUMNS comp_id INT UNSIGNED NOT NULL, disk_id INT UNSIGNED NOT NULL;


//заполнение стоки данными(добавляем две строки в таблицу Disk)
Insert into Disk
	values (NULL,1000,200,6000,20),(NULL,1500,300,8000,25);
	
//заполнить промежуточную таблицу(указываем связь между сборкой(comp) и диском)
//пусть в сборке с id=1 стоит два диска(с id=1 и c id=2), а во второй сборке(id=2) стоит один диск(с id=2)
Insert into CompDisk
	values (NULL,1,1),(NULL,1,2),(NULL,2,2);
или
указать те поля которые заполнять
Insert into CompDisk (comp_id, disk_id) values
	(1,1),
	(1,2),
	(2,2)
;

//дозапишем
Insert into Disk
	values (NULL,3000,500,10000,4),(NULL,320,100,1000,17),(NULL,250,80,800,25);
	
Insert into CompDisk (comp_id, disk_id) values
	(1,3),
	(1,2),
	(2,4),
	(3,1),
	(5,3)
;

//изменить параметров существующего столбца
ALTER TABLE `case` ALTER COLUMN power DROP DEFAULT;
ALTER TABLE `case` ALTER COLUMN weight SET NOT NULL;
ALTER TABLE `case` MODIFY cost INT UNSIGNED NOT NULL;

//добавим строки
Insert into `case` values
	(NULL, 450,1600,450),
	(NULL, 600,2560,800),
	(NULL, 200,800, 350)
;
//установить значение веса в таблице case у строк с id=1 и id=2
UPDATE `case` SET weight =  300 WHERE id=1;
UPDATE `case` SET weight =  330 WHERE id=2;

//поменять цену - например уменьшить на 50 все цены
UPDATE `case` SET cost = cost - 50;

//(id+cpu_id)%5 - это от 0 до 4
UPDATE comp SET case_id = (id+cpu_id)%5+1;  - проставляем новые значения case_id в таблице comp(так теперь у нас 5 корпусов)

//вывод для проверки
select case_id FROM comp
limit 10;


//объединение таблиц

//вывести табл в которой название сборки и сумма гигабайт
SELECT comp.name, disk.`value` FROM comp
	LEFT JOIN compdisk ON comp.id=compdisk.comp_id
	LEFT JOIN disk ON disk.id=compdisk.disk_id
WHERE comp.id =1005;

update compdisk set comp_id = 1005; - так как у нас смещение айдишников в табл comp(они начинаются с 1005) - но поменяются все значения столбца comp_id


delete from compdisk where id>1;

insert into compdisk value (NULL, 1006, 1);
insert into compdisk value (NULL, 1006, 2);

//
SELECT 
	comp.name as COMP, 
	disk.`value`,
	disk.weight as DWeight,
	cpu.name as CPU,
	cpu.weight as CWeight
FROM comp
	LEFT JOIN compdisk ON comp.id=compdisk.comp_id
	LEFT JOIN disk ON disk.id=compdisk.disk_id
	LEFT JOIN cpu ON comp.cpu_id = cpu.id
WHERE comp.id =1006;

//соеденим строки ......
SELECT 
	comp.name as COMP, 
	SUM(disk.`value`) as `Value`,
	COUNT(disk.`value`) as `Count`,
	disk.weight as DWeight,
	cpu.name as CPU,
	cpu.weight as CWeight
FROM comp
	LEFT JOIN compdisk ON comp.id=compdisk.comp_id
	LEFT JOIN disk ON disk.id=compdisk.disk_id
	LEFT JOIN cpu ON comp.cpu_id = cpu.id
WHERE comp.id =1006;


				Лекция 6
				
//namePC nameCPU weight(пока только cpu) selfcost(себистоимость - пока только cpu)	cost(стоимость сборки)
SELECT
	comp.name as NAME_PC,
	cpu.name as CPU,
	cpu.weight as Weight,
	cpu.cost as selfcost,
	comp.cost as Cost
FROM comp
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LIMIT 5;

////namePC power(case) weight(пока только корпуса) selfcost(себистоимость - пока только корпуса)	cost(стоимость сборки)
SELECT 
	comp.name as NAME_PC,
	`case`.powerBP as `Power`,
	`case`.weight as Weight,
	`case`.cost as Selfcost,
	comp.cost as Cost
FROM comp
LEFT JOIN `case` ON comp.case_id = `case`.id
LIMIT 6;
	
// теперь вывести данные по cpu и case(будем складывать веса и себестоимости)
SELECT
	comp.name as Name,
	comp.cost as Cost,
	cpu.name as CPU,
	`case`.powerBP as `Power`,
	cpu.weight WeightCPU,
	cpu.cost as CostCPU,
	`case`.weight as WeightCase,
	`case`.cost as CostCase,
	(cpu.weight + `case`.weight) as SumWeight,
	(cpu.cost + `case`.cost) as `SumSelfcost(CPU,Case)`
FROM comp
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON comp.case_id = `case`.id
LIMIT 5;

//name(сборки) cost(сборки) cpu power weight(суммарный) selfcost(суммарная) incoming(доход с продажи: comp.cost - selfcost(суммарная))
SELECT
	comp.name as Name,
	comp.cost as Cost,
	cpu.name as CPU,
	`case`.powerBP as `Power`,
	(cpu.weight + `case`.weight) as SumWeight,
	(cpu.cost + `case`.cost) as `SumSelfcost(CPU,Case)`,
	comp.cost - (cpu.cost + `case`.cost) as incoming
FROM comp
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON comp.case_id = `case`.id
LIMIT 5;

// подключим к сборке Диски
// name cost(сборки) id(диска) value(диска) weight selfcost 
SELECT
	comp.name as NamePC,
	comp.cost as Cost,
	compdisk.disk_id,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LIMIT 10;

// добавить суммарную инфу (группировка GROUP BY и групповая операция суммирования(сумма по столбцам) SUM)
SELECT
	comp.name as NamePC,
	comp.cost as Cost,
	compdisk.disk_id,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	SUM(disk.`value`),
	SUM(disk.weight),
	SUM(disk.cost)
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
GROUP BY comp.id
LIMIT 10;

//объединим все характеристики
SELECT
	comp.name as NamePC,
	comp.cost as Cost,
	`case`.powerBP as `Power`,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	SUM(disk.`value`) as sumValueDisks,
	(cpu.weight + `case`.weight) as Wcpu_case,
	(cpu.cost + `case`.cost) as Ccpu_case,
	(cpu.weight + `case`.weight) + SUM(disk.weight) as SumWeight,
	(cpu.cost + `case`.cost) + SUM(disk.cost) as `Selfcost(CPU,Case,Disks)`
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON `case`.id = comp.case_id
GROUP BY comp.id
LIMIT 10;

//ф-ция IFNULL(<значение><значение по умолчанию>) - если в <значение> NULL, то вернет <значение по умолч>
//то есть если в сборке нет какого-то диска, то суммарный вес все равно посчитается(то же самое и с cpu)
//это защита от NULL
SELECT
	comp.name as NamePC,
	comp.cost as Cost,
	`case`.powerBP as `Power`,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	SUM(disk.`value`) as sumValueDisks,
	(cpu.weight + `case`.weight) as Wcpu_case,
	(cpu.cost + `case`.cost) as Ccpu_case,
	IFNULL(cpu.weight, 0) + IFNULL(`case`.weight, 0) + IFNULL(SUM(disk.weight), 0) as SumWeight,
	IFNULL(cpu.cost,0) + IFNULL(`case`.cost,0) + IFNULL(SUM(disk.cost),0) as `Selfcost(CPU,Case,Disks)`
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON `case`.id = comp.case_id
GROUP BY comp.id
LIMIT 10;

//создадим из всего таблицу(в php)
// COUNT(DISTINCT compdisk.id) - при групповой операции(GROUP BY) подсчитает кол-во compdisk.id - то есть подсчет кол-ва дисков в сборке
(DISTINCT - отберет только уникальные)
SELECT
	comp.name as NamePC,
	`case`.powerBP as `Power`,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	COUNT(DISTINCT compdisk.id) as `CountDisk`,
	SUM(disk.`value`) as sumValueDisks,
	(cpu.weight + `case`.weight) as Wcpu_case,
	(cpu.cost + `case`.cost) as Ccpu_case,
	IFNULL(cpu.weight, 0) + IFNULL(`case`.weight, 0) + IFNULL(SUM(disk.weight), 0) as SumWeight,
	IFNULL(cpu.cost,0) + IFNULL(`case`.cost,0) + IFNULL(SUM(disk.cost),0) as `cost(CPU,Case,Disks)`
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON `case`.id = comp.case_id
GROUP BY comp.id
LIMIT 10;


			Лекция 7
			
//отдельный класс, ответственный за получение запросов и ответов
//так же есть отдельный класс отвечающий за логику
//смотреть файл Complist.php

SELECT
	comp.name as NamePC,
	`case`.powerBP as `Power`,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	COUNT(DISTINCT compdisk.id) as `CountDisk`,
	SUM(disk.`value`) as sumValueDisks,
	(cpu.weight + `case`.weight) as Wcpu_case,
	(cpu.cost + `case`.cost) as Ccpu_case,
	IFNULL(cpu.weight, 0) + IFNULL(`case`.weight, 0) + IFNULL(SUM(disk.weight), 0) as SumWeight,
	IFNULL(cpu.cost,0) + IFNULL(`case`.cost,0) + IFNULL(SUM(disk.cost),0) as `cost(CPU,Case,Disks)`
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON `case`.id = comp.case_id
WHERE comp.cost >25000	- WHERE применяется до группировки, и не видит SUM и его псевдонима(sumValueDisks), только disk.`value`
GROUP BY comp.id
HAVING comp.cost >1000	- HAVING применяется после группировки(работает быстрее)
LIMIT 10;


SELECT
	comp.name as NamePC,
	`case`.powerBP as `Power`,
	disk.`value` as ValueDisk,
	disk.weight as WeightDisk,
	disk.cost as SelfCostDisk,
	COUNT(DISTINCT compdisk.id) as `CountDisk`,
	SUM(disk.`value`) as sumValueDisks,
	(cpu.weight + `case`.weight) as Wcpu_case,
	(cpu.cost + `case`.cost) as Ccpu_case,
	IFNULL(cpu.weight, 0) + IFNULL(`case`.weight, 0) + IFNULL(SUM(disk.weight), 0) as SumWeight,
	IFNULL(cpu.cost,0) + IFNULL(`case`.cost,0) + IFNULL(SUM(disk.cost),0) as `cost(CPU,Case,Disks)`
FROM comp
LEFT JOIN compdisk ON comp.id = compdisk.comp_id
LEFT JOIN disk ON compdisk.disk_id = disk.id
LEFT JOIN cpu ON comp.cpu_id = cpu.id
LEFT JOIN `case` ON `case`.id = comp.case_id
WHERE comp.cost >25000	
GROUP BY comp.id
HAVING comp.cost >25000
LIMIT 10;


//	создать таблицы user и order
create table user (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT, 
	login varchar(25),
	password varchar(25),
	email varchar(25),
	phone varchar(25),
	PRIMARY KEY (id)
);

create table orders (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT, 
	user_id INT UNSIGNED NOT NULL,
	goods_id INT UNSIGNED NOT NULL,
	total_cost INT UNSIGNED NOT NULL,
	createdon Timestamp DEFAULT CURRENT_TIMESTAMP,	//DEFAULT CURRENT_TIMESTAMP - текущее время по умолчанию
	status_id INT UNSIGNED NOT NULL,
	payment_method_id INT UNSIGNED NOT NULL,
	PRIMARY KEY (id)
);

//изменить столбец password (чтобы влезал хэш пароля)
alter table user  MODIFY password VARCHAR(32) NOT NULL;

//заполнить таблицу user(будет два пользователя, вместо пароля его хэш)
INSERT INTO user VALUES(NULL, "admin", '202cb962ac59075b964b07152d234b70', 'admin@localhost', '555-55-55');
INSERT INTO user VALUES(NULL, "ivan", 'd8578edf8458ce06fbc5bb76a58c5ca4', 'ivan@mail.ru', '777-77-77');

//удалить goods_id
alter table orders drop column goods_id;

//очистить таблицу (иначе не даст изменить параметры столбца createdon на NOT NULL)
TRUNCATE table orders;
		
//сделать createdon NOT NULL
alter table orders MODIFY createdon Timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP;

//заполнить табл заказов(будет два заказа для одного и 1 заказ для другого пользователя)
INSERT INTO orders VALUES
		(NULL, 1, 35000, CURRENT_TIMESTAMP, 1, 1),
		(NULL, 1, 15000, CURRENT_TIMESTAMP, 1, 2),
		(NULL, 2, 55000, CURRENT_TIMESTAMP, 2, 1);
		
//запрос
SELECT 
	user.id as 'ID User',
	user.login as Login,
	user.email as Email,
	user.phone as Phone,
	orders.user_id,
	orders.total_cost,
	orders.createdon,
	orders.status_id,
	orders.payment_method_id
FROM user
LEFT JOIN orders ON orders.user_id = user.id;


			Лекция 8
			
//
ALTER TABLE user ADD COLUMN `name` varchar(50);

UPDATE user set `name` = 'ivan ivanov'
WHERE user.id = 2;

UPDATE user set `name` = 'admin adminov'
WHERE user.id = 1;


			//для проекта
//создаем новую базу для проекта, создаем пользователя, наделяем его правами
CREATE DATABASE myshopdb CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER 'admin'@'localhost' IDENTIFIED BY '123';
GRANT ALL PRIVILEGES ON  myshopdb.* TO 'admin'@'localhost';	
//создаем таблицу товаров
CREATE TABLE goods (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT, 
	name varchar(50) default "PRODUCT",
	cost INT UNSIGNED NOT NULL,
	weight float default 0.0,
	`count` int UNSIGNED default 0,
	vogue int UNSIGNED default 0,
	category varchar(50),
	description TEXT,
	img varchar(50),
	receipt_data DATE,
	PRIMARY KEY (id)
);
//изменить значение столбца weight с float на int и записывать граммы(иначе при алгебраических опарациях будет неточность)
//а при выводе делить на 1000 и получать килограммы
ALTER TABLE goods MODIFY weight int NOT NULL;

//таблица пользователи
CREATE TABLE `user` (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	login varchar(25) NOT NULL,
	password varchar(32) NOT NULL,
	email varchar(25) NOT NULL,
	phone varchar(25) NOT NULL,
	name varchar(50) NOT NULL,
	addres varchar(50) NOT NULL DEFAULT "empty",
	PRIMARY KEY(id)
);

пользователи
1) 
INSERT INTO `user`
	VALUES (NULL, 'anna', '202cb962ac59075b964b07152d234b70', 'annita@ya.ru', '89219247022', 'Анна Федорова', 'СПБ Литейный д.34 кв.6');
2)
INSERT INTO `user`
	VALUES (NULL, 'roma', '202cb962ac59075b964b07152d234b70', 'roman@ya.ru', '89117250013', 'Роман Евдокимов', 'СПБ Светлановский пр. д.34 кв.6');
	
	
//таблица корзины
CREATE TABLE cart (
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	goods_id int UNSIGNED NOT NULL,
	goods_count int UNSIGNED NOT NULL,
	user_id int UNSIGNED NOT NULL,
	status int UNSIGNED NOT NULL,
	PRIMARY KEY(id)
);	
корзина
1) INSERT INTO cart VALUES 
				(NULL, 1, 3, 2, 1),
				(NULL, 1, 1, 1, 1),
				(NULL, 2, 2, 2, 1),
				(NULL, 4, 1, 2, 1),
				(NULL, 3, 4, 1, 1);

//запрос на поиск товаров в корзине пользователей(по user_id)
SELECT
	goods.id as 'id товара', 
	goods.name as 'Название', 
	goods.cost as 'цена товара',
	goods.weight as weight,
	goods.vogue as vogue,
	goods.category as 'категория товара',
	goods.description as description,
	goods.img as path_to_img,
	goods.receipt_data,
	cart.goods_id,
	cart.goods_count as 'количество в корзине',
	(goods.cost * cart.goods_count) as 'summ_cost',
	cart.user_id
FROM goods
LEFT JOIN cart ON goods.id = cart.goods_id
LEFT JOIN `user` ON `user`.id = cart.user_id
WHERE user_id = 2;

//короткий запрос для проверки подсчетов
SELECT
	goods.id as 'id товара', 
	goods.name as 'Название', 
	goods.cost as 'цена товара',
	goods.weight as weight,
	cart.goods_count as 'count_in_cart',
	(goods.cost * cart.goods_count) as 'summ_cost',
	cart.user_id
FROM goods
LEFT JOIN cart ON goods.id = cart.goods_id
LEFT JOIN `user` ON `user`.id = cart.user_id
WHERE user_id = 2;

//запрос на подсчет общей суммы,веса и кол-ва
SELECT
	SUM(goods.cost * cart.goods_count) as 'total_cost',
	SUM(cart.goods_count) as 'total_count',
	SUM(goods.weight * cart.goods_count) as 'total_weight'
FROM goods
LEFT JOIN cart ON goods.id = cart.goods_id
LEFT JOIN `user` ON `user`.id = cart.user_id
WHERE user_id = 2;	
		
//запрос на поиск товара с определенным id(получаем из get параметра) в корзине пользователя
SELECT
	goods.id,
	goods.name,
	`cart`.goods_count
FROM goods
LEFT JOIN `cart` ON `cart`.goods_id = goods.id
LEFT JOIN `user` ON `user`.id = `cart`.user_id
WHERE user_id = 2 AND goods_id = 1;		
(user_id берем из $this->user_id , а goods_id из $_GET['id'])

//изменение значения user.goods_count(+1) если нажали добавить в корзину и товар такой есть
UPDATE `cart` SET goods_count = goods_count +1
WHERE user_id = 2 AND goods_id = 1; 

//добавление товара в корзину(если такого еще не было в корзине)
//(user_id берем из $this->user_id , а goods_id из $_GET['id'] , goods_count = 1)
INSERT INTO cart VALUES (NULL, 4, 1, 2, 1);

//удаление товара из корзины
DELETE FROM cart WHERE user_id = 2 AND goods_id = 3;

//очистить корзину
TRUNCATE table cart;

//запрос кол-ва товара в базе goods с определенным id
SELECT goods.`count` FROM goods WHERE id = 3;
//для проверки
SELECT goods.id, goods.`count` FROM goods WHERE id = 3;

товары
1) Картридж для Xerox 3225
цена: 3500
вес: 0.5
кол-во: 4
популярность: 6
категория: расходные материалы
описание: Для лазерного принтера(черный). совместимые модели: Xerox Phaser 3052, Xerox Phaser 3260, Xerox WorkCentre 3215, Xerox WorkCentre 3225. Ресурс: 4100 страниц. В наборе 2шт.
фото: images/goods/xerox3225.jpg
дата поступления: 18.12.2018

INSERT INTO goods
	values (NULL,'Картридж для Xerox 3225', 3500, 0.5, 4, 6, 'расходные материалы', 
			'Для лазерного принтера(черный). совместимые модели: Xerox Phaser 3052, Xerox Phaser 3260, Xerox WorkCentre 3215, Xerox WorkCentre 3225. Ресурс: 4100 страниц. В наборе 2шт.',
			'images/goods/xerox3225.jpg', '2018.12.20');
//изменить значение веса(в граммы)
UPDATE goods SET weight = 500
WHERE goods.id = 1;
//поменять имя
UPDATE goods SET name = 'Картридж Xerox 3225'
WHERE goods.id = 1;

2) Картридж для Xerox 3220
цена: 2900
вес: 0.4
кол-во: 2
популярность: 3
категория: расходные материалы
описание: Для лазерного принтера(черный). совместимые модели: Xerox WorkCentre 3210, Xerox WorkCentre 3220 . Ресурс: 3000 страниц.
фото: images/goods/xerox3220.jpg
дата поступления: 2018.11.24

INSERT INTO goods
	values (NULL, 'Картридж для Xerox 3220', 2900, 0.4, 2, 3, 'расходные материалы',
	'Для лазерного принтера(черный). совместимые модели: Xerox WorkCentre 3210, Xerox WorkCentre 3220 . Ресурс: 3000 страниц.',
	'images/goods/xerox3220.jpg', '2018.11.24');
//изменить значение веса(в граммы)
UPDATE goods SET weight = 400
WHERE goods.id = 2;
//поменять имя
UPDATE goods SET name = 'Картридж Xerox 3220'
WHERE goods.id = 2;

3) Картридж для HP Pro 400
цена: 5100
вес: 0.7
кол-во: 2
популярность: 7
категория: расходные материалы
описание: Для лазерного принтера(черный). совместимые модели: HP LaserJet Pro 400 M401, HP LaserJet Pro 400 M425 . Ресурс: 2700 страниц.
фото: images/goods/hp80a.jpg
дата поступления: 13.07.2018

INSERT INTO goods
	values (NULL, 'Картридж для HP Pro 400', 5100, 0.7, 2, 7, 'расходные материалы',
	'Для лазерного принтера(черный). совместимые модели: HP LaserJet Pro 400 M401, HP LaserJet Pro 400 M425 . Ресурс: 2700 страниц.',
	'images/goods/hp80a.jpg', '2018.07.13');
//изменить значение веса(в граммы)
UPDATE goods SET weight = 700
WHERE goods.id = 3;
//поменять имя
UPDATE goods SET name = 'Картридж HP 400'
WHERE goods.id = 3;

4) Оперативная память Kingston
цена: 1500
вес: 0.1
кол-во: 10
популярность: 3
категория: комплектующие
описание: Тип памяти DDR3. Тактовая частота 1333 МГц. Пропускная способность 10600 МБ/с. Объем 1 модуль 2 ГБ
фото: images/goods/ram_kingston.jpg
дата поступления: 24.01.2019

INSERT INTO goods
	values (NULL, 'Оперативная память Kingston', 1500, 0.1, 10, 3, 'комплектующие',
	'Тип памяти DDR3. Тактовая частота 1333 МГц. Пропускная способность 10600 МБ/с. Объем 1 модуль 2 ГБ.',
	'images/goods/ram_kingston.jpg', '2019.01.24');
//изменить значение веса(в граммы)
UPDATE goods SET weight = 100
WHERE goods.id = 4;
//поменять имя
UPDATE goods SET name = 'память Kingston'
WHERE goods.id = 4;

5) Оперативная память Silicon
цена: 2500
вес: 100
кол-во: 6
популярность: 2
категория: комплектующие
описание: Тип памяти DDR3. Тактовая частота 1333 МГц. Пропускная способность 10600 МБ/с. Объем 1 модуль 4 ГБ
фото: images/goods/ram_silicon.jpg
дата поступления: 2019.01.24

INSERT INTO goods
	values (NULL, 'Оперативная память Silicon', 2500, 100, 6, 2, 'комплектующие', 
	'Тип памяти DDR3. Тактовая частота 1333 МГц. Пропускная способность 10600 МБ/с. Объем 1 модуль 4 ГБ.',
	'images/goods/ram_silicon.jpg', '2019.01.24');
//поменять имя
UPDATE goods SET name = 'память Silicon'
WHERE goods.id = 5;

6) Диск SSD ADATA
цена: 2900
вес: 200
кол-во: 6
популярность: 2
категория: комплектующие
описание: Тип SSD. Объем 240 ГБ. Скорость записи/Скорость чтения 450/520 МБ/с. Подключение SATA 6Gbit/s. Поддержка секторов размером 4 КБ. Тип флэш-памяти TLC 3D NAND. Назначение для ноутбука и настольного компьютера. Форм-фактор 2.5 дюймов.
фото: images/goods/ssd_adata.jpg
дата поступления: 2019.02.12

INSERT INTO goods
	values (NULL, 'Диск SSD ADATA', 2900, 200, 6, 2, 'комплектующие',
	'Тип SSD. Объем 240 ГБ. Скорость записи/Скорость чтения 450/520 МБ/с. Подключение SATA 6Gbit/s. Поддержка секторов размером 4 КБ. Тип флэш-памяти TLC 3D NAND. Назначение для ноутбука и настольного компьютера. Форм-фактор 2.5 дюймов.',
	'images/goods/ssd_adata.jpg', '2019.02.12');

7) Диск SSD Sumsung
цена: 3100
вес: 250
кол-во: 3
популярность: 4
категория: комплектующие
описание: Тип SSD. Объем 256 ГБ. Скорость записи/Скорость чтения 460/570 МБ/с. Подключение SATA 6Gbit/s. Поддержка секторов размером 4 КБ. Тип флэш-памяти TLC 3D NAND. Назначение для ноутбука и настольного компьютера. Форм-фактор 2.5 дюймов.
фото: images/goods/ssd_sumsung.jpg
дата поступления: 2019.02.09

INSERT INTO goods
	values (NULL, 'Диск SSD Sumsung', 3100, 250, 3, 4, 'комплектующие', 
	'Тип SSD. Объем 256 ГБ. Скорость записи/Скорость чтения 460/570 МБ/с. Подключение SATA 6Gbit/s. Поддержка секторов размером 4 КБ. Тип флэш-памяти TLC 3D NAND. Назначение для ноутбука и настольного компьютера. Форм-фактор 2.5 дюймов.',
	'images/goods/ssd_sumsung.jpg', '2019.02.09');

8) Диск HDD Seagate
цена: 7600
вес: 1600
кол-во: 1
популярность: 7
категория: комплектующие
описание: Объем 4Тб. Объем кэш-памяти 64Мб. Скорость вращения шпинделя 5900 rpm. Максимальная скорость передачи данных 180 Мбайт/с. Интерфейс SATA III. Пропускная способность интерфейса 6 Гбит/с.
фото: images/goods/hdd_seagate.jpg
дата поступления: 2018.12.06

INSERT INTO goods
	value (NULL, 'Диск HDD Seagate', 7600, 1600, 1, 7, 'комплектующие',
	'Объем 4Тб. Объем кэш-памяти 64Мб. Скорость вращения шпинделя 5900 rpm. Максимальная скорость передачи данных 180 Мбайт/с. Интерфейс SATA III. Пропускная способность интерфейса 6 Гбит/с.',
	'images/goods/hdd_seagate.jpg', '2018.12.06');

9) Диск HDD WD
цена: 7800
вес: 1500
кол-во: 1
популярность: 8
категория: комплектующие
описание: Объем 3Тб. Объем кэш-памяти 64Мб. Скорость вращения шпинделя 5400 rpm. Максимальная скорость передачи данных 210 Мбайт/с. Интерфейс SATA III. Пропускная способность интерфейса 6 Гбит/с.
фото: images/goods/hdd_western.jpg
дата поступления: 2018.11.06

INSERT INTO goods
	value (NULL, 'Диск HDD WD', 7800, 1500, 1, 8, 'комплектующие',
	'Объем 3Тб. Объем кэш-памяти 64Мб. Скорость вращения шпинделя 5400 rpm. Максимальная скорость передачи данных 210 Мбайт/с. Интерфейс SATA III. Пропускная способность интерфейса 6 Гбит/с.',
	'images/goods/hdd_western.jpg', '2018.11.06');

10) Детский комбинезон
цена: 2400
вес: 700
кол-во: 1
популярность: 2
категория: одежда
описание: б/у. Отличное состояние. Состав: 100% полиэстер. Утеплитель: 300 гр. Подкладка: 100% полиэстер, 180 гр. флис. Бренд: Lappi Kids. Цвет синий.
фото: images/goods/overalls.jpg
дата поступления: 2018.12.07

INSERT INTO goods
	value (NULL, 'Детский комбинезон', 2400, 700, 1, 2, 'одежда',
	'б/у. Отличное состояние. Состав: 100% полиэстер. Утеплитель: 300 гр. Подкладка: 100% полиэстер, 180 гр. флис. Бренд: Lappi Kids. Цвет синий.',
	'images/goods/overalls.jpg', '2018.12.07');

11) Валенки детские
цена: 700
вес: 400
кол-во: 1
популярность: 3
категория: одежда
описание: б/у. Отличное состояние. Высшее качество. Полностью экологичные.
фото: images/goods/felt_boots.jpg
дата поступления: 2018.12.06

INSERT INTO goods
	value (NULL, 'Валенки детские', 700, 400, 1, 3, 'одежда',
	'б/у. Отличное состояние. Высшее качество. Полностью экологичные.',
	'images/goods/felt_boots.jpg', '2018.12.06');

12) Краги детские
цена: 800
вес: 100
кол-во: 1
популярность: 6
категория: одежда
описание: б/у. Отличное состояние. Зимние краги для детей выполнены из ткани Blazer Membrane, подклад хлопок. 3-5 лет (22-8-12). Цвет желтый.
фото: images/goods/mittens.jpg
дата поступления: 2018.11.01

INSERT INTO goods
	value (NULL, 'Краги детские', 800, 100, 1, 6, 'одежда',
	'б/у. Отличное состояние. Зимние краги для детей выполнены из ткани Blazer Membrane, подклад хлопок. 3-5 лет (22-8-12). Цвет желтый.',
	'images/goods/mittens.jpg', '2018.11.01');

13) Сандали детские
цена: 250
вес: 100
кол-во: 1
популярность: 2
категория: одежда
описание: б/у. Отличное состояние. Синие сандалии Jook из натуральной замши. Стелька и подкладка из натуральной кожи. Регулируемые по ширине ножки ремешки «велкро». Фактурная полимерная подошва.
фото: images/goods/sandals.jpg
дата поступления: 2019.01.29

INSERT INTO goods
	value (NULL, 'Сандали детские', 250, 100, 1, 2, 'одежда',
	'б/у. Отличное состояние. Синие сандалии Jook из натуральной замши. Стелька и подкладка из натуральной кожи. Регулируемые по ширине ножки ремешки «велкро». Фактурная полимерная подошва.',
	'images/goods/sandals.jpg', '2019.01.29');

14) Fairy
цена: 390
вес: 700
кол-во: 4
популярность: 7
категория: бытовая химия
описание: Средство для мытья посуды. Fairy разработали специальную формулу, протестированную с дерматологами, которая не только отлично справится с жиром, но и придаст мягкости Вашим рукам.
фото: images/goods/fairy.jpg
дата поступления: 2019.01.04

INSERT INTO goods
	value (NULL, 'Fairy', 390, 700, 4, 7, 'бытовая химия',
	'Средство для мытья посуды. Fairy разработали специальную формулу, протестированную с дерматологами, которая не только отлично справится с жиром, но и придаст мягкости Вашим рукам.',
	'images/goods/fairy.jpg', '2019.01.04');

15) Finnish
цена: 1900
вес: 1800
кол-во: 3
популярность: 9
категория: бытовая химия
описание: Моющее средство для посудомоечной машины Finish. 100 штук. Страна производителя Финляндия.
фото: images/goods/finnish.jpg
дата поступления: 2019.01.04

INSERT INTO goods
	value (NULL, 'Finnish', 1900, 1800, 3, 9, 'бытовая химия',
	'Моющее средство для посудомоечной машины Finish. 100 штук. Страна производителя Финляндия.',
	'images/goods/finnish.jpg', '2019.01.04');

16) Sif
цена: 200
вес: 600
кол-во: 2
популярность: 6
категория: бытовая химия
описание: Чистящее средство-крем. Универсальное средство. Подходит для металлических поверхностей, стеклокерамики, эмалированных поверхностей, кухонных плит, грилей.
фото: images/goods/sif.jpg
дата поступления: 2018.01.05 

INSERT INTO goods
	value (NULL, 'Sif', 200, 600, 2, 6, 'бытовая химия',
	'Чистящее средство-крем. Универсальное средство. Подходит для металлических поверхностей, стеклокерамики, эмалированных поверхностей, кухонных плит, грилей.',
	'images/goods/sif.jpg', '2018.01.05 ');

17) Fahrenheit
цена: 3750
вес: 200
кол-во: 1
популярность: 7
категория: косметика
описание: Аромат: Кожаные древесные. Производство: Франция. Для: мужчин. Объем, мл: 150
фото: images/goods/fehrenheit.jpg
дата поступления: 2019.02.01

INSERT INTO goods
	value (NULL, 'Fahrenheit', 3750, 200, 1, 7, 'косметика',
	'Аромат: Кожаные древесные. Производство: Франция. Для: мужчин. Объем, мл: 150',
	'images/goods/fehrenheit.jpg', '2019.02.01');

18) Aqva
цена: 2600
вес: 110
кол-во: 3
популярность: 4
категория: косметика
описание: Аромат: кедр из вирджинии, амбра.  Производство: Бельгия. Для: женщин. Объем, мл: 100
фото: images/goods/aqva.jpg
дата поступления: 2019.02.07

INSERT INTO goods
	value (NULL, 'Aqva', 2600, 110, 3, 4, 'косметика',
	'Аромат: кедр из вирджинии, амбра.  Производство: Бельгия. Для: женщин. Объем, мл: 100',
	'images/goods/aqva.jpg', '2019.02.07');

19) Кроватка детская
цена: 17000
вес: 17000
кол-во: 1
популярность: 3
категория: мебель
описание: б/у. Отличное состояние. Материал дерево. Цвет белый. Для матраса размером 60x120 см. Размеры (ШxДxВ) 72x125x109 см.
фото: images/goods/crib.jpg
дата поступления: 2019.01.06

INSERT INTO goods
	value (NULL, 'Кроватка детская', 17000, 17000, 1, 3, 'мебель',
	'б/у. Отличное состояние. Материал дерево. Цвет белый. Для матраса размером 60x120 см. Размеры (ШxДxВ) 72x125x109 см.',
	'images/goods/crib.jpg', '2019.01.06');

20) Стульчик детский
цена: 3600
вес: 5600
кол-во: 1
популярность: 4
категория: мебель
описание: б/у. Отличное состояние. Polly Progres5 — это единственный стульчик, который "растет" вместе с ребенком с самого рождения до 3 лет.
фото: images/goods/Chair.jpg
дата поступления: 2019.01.06

INSERT INTO goods
	value (NULL, 'Стульчик детский', 3600, 5600, 1, 4, 'мебель',
	'б/у. Отличное состояние. Polly Progres5 — это единственный стульчик, который "растет" вместе с ребенком с самого рождения до 3 лет.',
	'images/goods/Chair.jpg', '2019.01.06');

21) Шкаф
цена: 5900
вес: 25000
кол-во: 1
популярность: 2
категория: мебель
описание: б/у. Отличное состояние. Шкаф 3-х дверный с зеркалом.
фото: images/goods/cupboard.jpg
дата поступления: 2017.11.23

INSERT INTO goods
	value (NULL, 'Шкаф', 5900, 25000, 1, 2, 'мебель',
	'б/у. Отличное состояние. Шкаф 3-х дверный с зеркалом.',
	'images/goods/cupboard.jpg', '2017.11.23');

22) Drops D3
цена: 390
вес: 100
кол-во: 9
популярность: 9
категория: витамины
описание: Суточная доза, 5 капель, содержит 10 микрограмм D 3 -витамина. Основное вещество, входящее в состав - колекальциферол.
фото: images/goods/drop_d3.jpg
дата поступления: 2019.01.03

INSERT INTO goods
	value (NULL, 'Drops D3', 390, 100, 9, 9, 'витамины',
	'Суточная доза, 5 капель, содержит 10 микрограмм D 3 -витамина. Основное вещество, входящее в состав - колекальциферол.',
	'images/goods/drop_d3.jpg', '2019.01.03');

23) Faberlic черника
цена: 560
вес: 100
кол-во: 3
популярность: 5
категория: витамины
описание: Концентрат сухой для приготовления безалкогольного напитка Черника плюс.
фото: images/goods/bads.jpg
дата поступления: 2019.01.03

INSERT INTO goods
	value (NULL, 'Faberlic черника', 560, 100, 3, 5, 'витамины',
	'Концентрат сухой для приготовления безалкогольного напитка Черника плюс.',
	'images/goods/bads.jpg', '2019.01.03');

24) Сыр Vallio
цена: 560
вес: 1900
кол-во: 2
популярность: 9
категория: продукты питания
описание: Содержание жира 17%. Производство Финляндия. Срок годности уточняйте.
фото: images/goods/vallio.jpg
дата поступления: 2019.02.01

INSERT INTO goods
	value (NULL, 'Сыр Vallio', 560, 1900, 2,  9, 'продукты питания',
	'Содержание жира 17%. Производство Финляндия. Срок годности уточняйте.',
	'images/goods/vallio.jpg', '2019.02.01');

25) Сыр Hermanni
цена: 520
вес: 1800
кол-во: 3
популярность: 7
категория: продукты питания
описание: Производство Финляндия. Срок годности уточняйте. Мягкий сливочный сыр, с характерным насыщенным вкусом. Не содержит лактозы и консервантов.
фото: images/goods/hermany.jpg
дата поступления: 2019.02.01

INSERT INTO goods
	value (NULL, 'Сыр Hermanni', 520, 1800, 3, 7, 'продукты питания',
	'Производство Финляндия. Срок годности уточняйте. Мягкий сливочный сыр, с характерным насыщенным вкусом. Не содержит лактозы и консервантов.',
	'images/goods/hermany.jpg', '2019.02.01');

26) Кофе Gevalia
цена: 480
вес: 950
кол-во: 6
популярность: 8
категория: продукты питания
описание: Производство Финляндия. Растворимый кофе. Размер упаковки: 16x6x21(см).Срок годности: 18 месяцев.
фото: images/goods/coffe_gevalia.jpg
дата поступления: 2019.02.01

INSERT INTO goods
	value (NULL, 'Кофе Gevalia', 480, 950, 6, 8, 'продукты питания',
	'Производство Финляндия. Растворимый кофе. Размер упаковки: 16x6x21(см).Срок годности: 18 месяцев.',
	'images/goods/coffe_gevalia.jpg', '2019.02.01');

27) Кофе Paulig
цена: 570
вес: 950
кол-во: 7
популярность: 7
категория: продукты питания
описание: Кофе молотый Paulig Presidentti Original. Вид зерен арабика. Обжарка светлая. Помол средний. Срок хранения 24 месяца.
фото: images/goods/coffe_paulig.jpg
дата поступления: 2019.02.01

INSERT INTO goods
	value (NULL, 'Кофе Paulig', 570, 950, 7, 7, 'продукты питания',
	'Кофе молотый Paulig Presidentti Original. Вид зерен арабика. Обжарка светлая. Помол средний. Срок хранения 24 месяца.',
	'images/goods/coffe_paulig.jpg', '2019.02.01');

28) Салями Kotimainen
цена: 1100
вес: 500
кол-во: 3
популярность: 8
категория: продукты питания
описание: Portti Kotimainen Meetvursti — салями в нарезке, вакуумная упаковка. Срок хранения 6 месяца.
фото: images/goods/Kotimainen.jpg
дата поступления: 2019.02.11

INSERT INTO goods
	value (NULL, 'Салями Kotimainen', 1100, 500, 3, 8, 'продукты питания',
	'Portti Kotimainen Meetvursti — салями в нарезке, вакуумная упаковка. Срок хранения 6 месяца.',
	'images/goods/Kotimainen.jpg', '2019.02.11');

29) Салями Montorsi
цена: 690
вес: 250
кол-во: 2
популярность: 4
категория: продукты питания
описание: Колбаса Montorsi Салями Эмилиано сыровяленая, 250г. Состав: свинина, соль, декстроза, специи, антиокислитель: аскорбиновая.
фото: images/goods/Montorsi.jpg
дата поступления: 2019.02.11

INSERT INTO goods
	value (NULL, 'Салями Montorsi', 690, 250, 2, 4, 'продукты питания',
	'Колбаса Montorsi Салями Эмилиано сыровяленая, 250г. Состав: свинина, соль, декстроза, специи, антиокислитель: аскорбиновая.',
	'images/goods/Montorsi.jpg', '2019.02.11');

30) Салями Gettiran
цена: 720
вес: 300
кол-во: 3
популярность: 5
категория: продукты питания
описание: Состав: Свинина (ЕС), соль, сахароза, специи (кориандр, черный перец, горчичное семя, белый перец), экстракты специй, декстроза, антиокислитель (Е316)
фото: images/goods/gettiran.jpg
дата поступления: 2019.02.11

INSERT INTO goods
	value (NULL, 'Салями Gettiran', 720, 300, 3, 5, 'продукты питания',
	'Состав: Свинина (ЕС), соль, сахароза, специи (кориандр, черный перец, горчичное семя, белый перец), экстракты специй, декстроза, антиокислитель (Е316)',
	'images/goods/gettiran.jpg', '2019.02.11');


//запросы для class CRequestGoods

SELECT 
	goods.name as name,
	goods.cost as cost,
	goods.weight as weight,
	goods.`count` as count,
	goods.vogue as vogue,
	goods.category as category,
	goods.description as description,
	goods.img as img,
	goods.receipt_data as receipt_data
FROM goods

// запрос товаров из goods определенной даты

SELECT goods.id, goods.name, goods.receipt_data
FROM goods
WHERE receipt_data > {d '2018-07-01'} AND receipt_data < {d '2019-02-14'}
ORDER BY receipt_data;

// СДЕЛАТЬ
1) чтобы страница не скакала - если нажимам на добавить в корзину или + и находимся не сначала страницы, то скакнет в начало.
2) 
3) адаптивность
4) Фильтры по..... сортировки по .....
5) личный кабинет
6) поиск по введенной информации
7) Показать все товары - сделать кнопку
8) номер заказа
9) модальное окно


alter table `user` add column avatar_type varchar(8);

UPDATE table `user` SET avatar_type = '{$ext}' WHERE id = {$this->user_id};