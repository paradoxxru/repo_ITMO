<?
						// Лекция 4
//новая колода карт - все лежат по порядку(туз(порядк номер 1)-двойка(поряд номер 2)-тройка-......)
//масти идут по порядку - черви, буби, крести, пики(то есть бубновый туз(порядк номер 14))
//Задача - по порядковуму номеру вывести масть и значение карты

//ф-ция возвращает значение карты и масть
//используем кратность 13
function getCardValue($i) {
	if (!is_int($i))	//проверяем число ли(чтобы не было строки вместо индекса)
		return 'требуется номер карты';
	if ($i <1 || $i >52)
		return 'нет такой карты';
	$suit = 'Ч'; //для масти(установили начальное значение)
	$val = 'Т'; //для значения карты(установили начальное значение)
		//определяем значение карты
	switch ($i % 13) { //если остаток от деления на 13....
		case 0:
			$val = 'К';
			break;
		case 1:
			$val = 'Т';
			break;
		case 11:
			$val = 'В';
			break;
		case 12:
			$val = 'Д';
			break;
		default: //иначе соответствует остатку от деления на 13
			$val = $i % 13;
	}
	//определяем масть
	switch(ceil($i/13)) {//округление в большую сторону
		case 1:
			$suit = 'hearts';
			break;
		case 2:
			$suit = 'diamonds';
			break;
		case 3:
			$suit = 'clubs';
			break;
		case 4:
			$suit = 'spades';
			break;
	}

	return "<span class='{$suit}'>{$val}</span>";// {} - явно указывают границы переменной 
	//тоже что и "<span class='" .$suit "'>" .$val "</span>";
	// Здусь возвращаем span с определенным классом(см. ниже), чтобы делее стилизовать значение,
	// выводимое в span(черви будут красные и будет изображение червей)
	// символы взяты - https://unicode-table.com/ru/sets/suits-of-the-cards/
}
echo "<br>";echo "<br>";
$i = rand(0, 53); //ф-ция rand() возвращ случ значение(от 0 до 53) - 0 и 53 выдадут ошибку
$card = getCardValue($i);
echo $i . ': ' . $card;

?>	
<style type="text/css">
	.hearts, .diamonds {color:red;}
	.clubs, .spades {color:black;}
	.hearts::before{content: "♥";}
	.diamonds::before{content: "♦"}
	.clubs::before{content: "♣"}
	.spades::before{content: "♠"}

</style>


<?php

//области видимости

echo '<pre>';
$aa1 = 1;
$aa3 = 3;
function fee2(){
   $aa2 = 2;
   global $aa3; //пробросили $aa3 из глобальной видимости в ф-цию
   echo '1: ' . $aa1 . PHP_EOL; //$a1 не будет доступна
   echo '2: ' . $aa2 . PHP_EOL; // PHP_EOL тоже самое что \n
   echo '3: ' . $aa3 . PHP_EOL;
}
fee2();
echo '4: ' . $aa1 . PHP_EOL;
echo '5: ' . $aa2 . PHP_EOL;
echo '6: ' . $aa3 . PHP_EOL;
echo '</pre>';

//статические переменные
/*Статическая переменная существует только в локальной области видимости 
функции, но не теряет своего значения, когда выполнение программы выходит из этой области видимости.
*/
function test()
{
    static $a = 0; //при втором запуске ф-ции test() $a будет уже 1
    $b = 0;
    echo $a;
    echo $b;
    $a++;$b++;
}
test();
test();
test();

//Проверка существования переменной
//bool isset ( mixed var [ , mixed … ] ) Определяет была ли установлена переменная значением, 
//отличным от NULL.
//Если передать более одного аргумента – True только если все переменные определены.
//Проверка происходит слева направо до первой неопределенной переменной.

//Уничтожение переменной
//void unset ( mixed var [ , mixed … ] )
//Удаляет перечисленные переменные.
//Если переменная, объявленная глобальной или передается ПО ССЫЛКЕ, удаляется внутри функции, 
//то будет удалена только локальная переменная.
//Переменная в области видимости вызова функции сохранит то же значение, что и до вызова unset().

?>