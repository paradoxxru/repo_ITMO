p { 
	font-size: 20px;
    color: red!important;
	/*line-height: 14px;*/
}

* {
	box-sizing: border-box; /* то есть ВСЕМ элементам назначаем свойство box-sizing в положение border-box.
	То есть теперь при указании ширины и высоты(width и height) эти параметры будут будут включать в себя
	content+padding+border*/
}

.cercle {
	height: 180px;
	width: 180px;
	padding: 20px;
	margin: 60px 20px;
	border: 3px solid green;
	background: #ecd5d5;
	border-radius: 50%;
	text-align: center;  /*центруется текст, но только по верхней строчке*/
}

.triangle {
	border: 40px solid transparent;  /*transparent - Устанавливает прозрачный фон*/
	border-left: 40px solid red;
	border-top: 40px solid black;
	border-right: 40px solid green;
	border-bottom: 40px solid orange;
	width: 100px;  /*если сделаем ширину и высоту равной размеру рамки*/
	height: 100px;
}

.triangle2 {
	border: 40px solid transparent; /*создали "пустой" элемент с прозрачной рамкой,
	 то есть содержимое элемента это точка с рамкой. рамка слева 40px, а справа до конца строки,
	 так как элемент блочный. зададим ширину и высоту*/
	width: 40px; /*теперь весь элемент вмемсте с рамкой будет занимать 40px в ширину*/
	height: 40px;
	/*даже если задать ширину и высоту в 1px, то элемент будет занимать размер рамки!!!
	То есть если вообще не задавать ширину и высоту, то элемент займет все пространство до конца строки.
	если задавать ширину и она будет меньше чем например рамка, то элемент будет занимать размер рамки, 
	если ширина больше размера рамки, то элемент будет занимать мето указанной ширины*/
	border-top: 40px solid green;	/*будет треугольник сверху*/
}

.text {
	color: orange;
	background-color: black;
	font-size: 20px;
	line-height: 22px;
	text-align: center;
	font: arial;
	text-transform: uppercase;
	width: 50%;
	height: 18rem;
}

.overflow {
	width: 140px;
	height: 140px;
	overflow: hidden; /*overflow управляет отображением содержания блочного элемента, если оно 
	целиком не помещается и выходит за область заданных размеров.
	hidden - скрывает не поместившийся контент
	visible - всегда показывает контент полностью
	scroll - отображает полосы прокрутки для просмотра контента*/
}

#_1s a{
	display: none;
}
#_2s a{
	display: block;
}
#_3s a{
	visibility: hidden;
}
											/*страница меню*/
/*даем св-ва элементу чтобы он занимал все пространство страницы
фон делаем "полупрозрачный"*/
.overlay {
	/*position: absolute;*/
	position: fixed; /*фиксированное относительно браузера положение элемента
	то есть при прокрутке вниц элемент будет оставаться на все окно обраузера*/
	background: #00000080;  /*полупрозрачный фон*/
	/*width: 100px;
	height: 100px;*/
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	/*display: none;*/ /*этим скрываем элемент, будто его не существовало
	при необходимости уберем это св-во*/
}
/*далее позиционируем элемент, в котором будет отображаться меню*/
.modelbox {
	color: #fff;
	font-size: 40px;
	width: 250px;
	height: 250px;
	border: 1px solid;
	/*left: calc(50% - 50px);*/ /*гибридная форма позиционирования - говорит о том, что мы хотим 
	отступить слева 50% размера страницы, а потом вычесть еще 50px(при условии что ширина элемента 100px).
	Этим мы разместим элемент посередине страницы*/
	margin: auto;  /*этим мы говорим браузеру чтобы он рассчитал внешние отступы автоматически
	ЭТИМ САМЫМ браузер поставит элемент(которому задана ширина) в середину страници*/
	/*position: absolute;*/
	/*transform: translate(50%);*/  /*Трансформирует элемент, в частности, позволяет 
	его масштабировать, вращать, сдвигать, наклонять, а также комбинировать виды трансформаций,
	 перечисляя функции трансформации через пробел. Этим тоже можно подвинуть элемент. Так же можно
	 "завалить" элемент*/
}